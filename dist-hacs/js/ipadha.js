(function(global) { 'use strict';var iPadHA = { version: '1.0.0', config: {}, entities: {}, eventListeners: [], isInitialized: false, isIOS9: false, isDragging: false, dragStartX: 0, dragStartY: 0, currentValue: 0, startValue: 0 };function detectIOS9() { var userAgent = navigator.userAgent;var iOS = /iPad|iPhone|iPod/.test(userAgent);var version = userAgent.match(/OS (\d+)_(\d+)/);return iOS && version && parseInt(version[1]) === 9 && parseInt(version[2]) <= 3;} var Utils = { debounce: function(func, wait) { var timeout;return function() { var context = this;var args = arguments;clearTimeout(timeout);timeout = setTimeout(function() { func.apply(context, args);}, wait);};}, throttle: function(func, limit) { var inThrottle;return function() { var args = arguments;var context = this;if (!inThrottle) { func.apply(context, args);inThrottle = true;setTimeout(function() { inThrottle = false;}, limit);} };}, isElementInViewport: function(el) { var rect = el.getBoundingClientRect();return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth) );}, hapticFeedback: function() { if (navigator.vibrate) { navigator.vibrate(10);} }, cleanup: function() { iPadHA.eventListeners.forEach(function(listener) { listener.element.removeEventListener(listener.event, listener.handler);});iPadHA.eventListeners = [];}, forceGC: function() { if (window.gc) { window.gc();} } };var EventDelegation = { initClickEvents: function() { document.addEventListener('click', function(e) { var tile = e.target.closest('.tile');if (tile) { EventDelegation.handleTileClick(tile, e);} var navTab = e.target.closest('.nav-tab');if (navTab) { EventDelegation.handleNavTabClick(navTab, e);} var button = e.target.closest('.touch-button');if (button) { EventDelegation.handleButtonClick(button, e);} });}, initTouchEvents: function() { document.addEventListener('touchstart', function(e) { var tile = e.target.closest('.tile');if (tile) { EventDelegation.handleTouchStart(tile, e);} var slider = e.target.closest('.tile-slider');if (slider) { EventDelegation.handleSliderTouchStart(slider, e);} }, { passive: false });document.addEventListener('touchmove', function(e) { if (iPadHA.isDragging) { EventDelegation.handleTouchMove(e);} }, { passive: false });document.addEventListener('touchend', function(e) { if (iPadHA.isDragging) { EventDelegation.handleTouchEnd(e);} }, { passive: false });}, handleTileClick: function(tile, e) { e.preventDefault();e.stopPropagation();var entityId = tile.getAttribute('data-entity-id');if (!entityId) return;Utils.hapticFeedback();tile.classList.add('touch-feedback');setTimeout(function() { tile.classList.remove('touch-feedback');}, 150);HomeAssistantAPI.toggleEntity(entityId);}, handleNavTabClick: function(tab, e) { e.preventDefault();e.stopPropagation();var tabId = tab.getAttribute('data-tab');if (!tabId) return;Utils.hapticFeedback();Navigation.switchTab(tabId);}, handleButtonClick: function(button, e) { e.preventDefault();e.stopPropagation();Utils.hapticFeedback();button.classList.add('touch-feedback');setTimeout(function() { button.classList.remove('touch-feedback');}, 150);var action = button.getAttribute('data-action');if (action) { Actions.execute(action, button);} }, handleTouchStart: function(tile, e) { e.preventDefault();tile.classList.add('touch-highlight');}, handleSliderTouchStart: function(slider, e) { e.preventDefault();iPadHA.isDragging = true;var touch = e.touches[0];var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();iPadHA.dragStartX = touch.clientX;iPadHA.dragStartY = touch.clientY;iPadHA.currentValue = Slider.getCurrentValue(slider);iPadHA.startValue = iPadHA.currentValue;Utils.hapticFeedback();}, handleTouchMove: function(e) { if (!iPadHA.isDragging) return;e.preventDefault();var touch = e.touches[0];var deltaX = touch.clientX - iPadHA.dragStartX;var slider = document.querySelector('.tile-slider.dragging');if (slider) { Slider.updatePosition(slider, deltaX);} }, handleTouchEnd: function(e) { if (!iPadHA.isDragging) return;e.preventDefault();iPadHA.isDragging = false;var slider = document.querySelector('.tile-slider.dragging');if (slider) { Slider.finishDrag(slider);} var highlightedTiles = document.querySelectorAll('.touch-highlight');highlightedTiles.forEach(function(tile) { tile.classList.remove('touch-highlight');});} };var Slider = { getCurrentValue: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var thumbLeft = parseInt(thumb.style.left) || 0;return Math.max(0, Math.min(100, (thumbLeft / rect.width) * 100));}, updatePosition: function(slider, deltaX) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var percentage = Math.max(0, Math.min(100, iPadHA.startValue + (deltaX / rect.width) * 100));iPadHA.currentValue = percentage;thumb.style.left = percentage + '%';var valueDisplay = slider.querySelector('.slider-value');if (valueDisplay) { valueDisplay.textContent = Math.round(percentage) + '%';} Slider.throttledUpdate(slider, percentage);}, throttledUpdate: Utils.throttle(function(slider, value) { var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId) { HomeAssistantAPI.setBrightness(entityId, value);} }, 50), finishDrag: function(slider) { slider.classList.remove('dragging');var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId) { HomeAssistantAPI.setBrightness(entityId, iPadHA.currentValue);} } };var Navigation = { switchTab: function(tabId) { var tabs = document.querySelectorAll('.nav-tab');tabs.forEach(function(tab) { tab.classList.remove('active');});var panels = document.querySelectorAll('.tab-panel');panels.forEach(function(panel) { panel.classList.remove('active');});var activeTab = document.querySelector('[data-tab="' + tabId + '"]');if (activeTab) { activeTab.classList.add('active');} var activePanel = document.getElementById(tabId);if (activePanel) { activePanel.classList.add('active');} if (window.gtag) { gtag('event', 'tab_switch', { 'tab_id': tabId });} } };var HomeAssistantAPI = { baseURL: '', token: '', init: function(config) { this.baseURL = config.homeAssistant.url;this.token = config.homeAssistant.token;}, callAPI: function(endpoint, method, data) { var xhr = new XMLHttpRequest();xhr.open(method || 'GET', this.baseURL + endpoint, true);xhr.setRequestHeader('Content-Type', 'application/json');if (this.token) { xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);} return new Promise(function(resolve, reject) { xhr.onreadystatechange = function() { if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { try { var response = JSON.parse(xhr.responseText);resolve(response);} catch (e) { resolve(xhr.responseText);} } else { reject(new Error('API Error: ' + xhr.status + ' ' + xhr.statusText));} } };if (data) { xhr.send(JSON.stringify(data));} else { xhr.send();} });}, toggleEntity: function(entityId) { var domain = entityId.split('.')[0];var service = domain === 'light' ? 'toggle' : 'toggle';return this.callAPI('/api/services/' + domain + '/' + service, 'POST', { entity_id: entityId });}, setBrightness: function(entityId, brightness) { return this.callAPI('/api/services/light/turn_on', 'POST', { entity_id: entityId, brightness_pct: Math.round(brightness) });}, getEntityState: function(entityId) { return this.callAPI('/api/states/' + entityId);}, getAllStates: function() { return this.callAPI('/api/states');} };var Actions = { execute: function(action, element) { switch (action) { case 'refresh': this.refresh();break;case 'settings': this.openSettings();break;case 'fullscreen': this.toggleFullscreen();break;default: console.log('Unknown action:', action);} }, refresh: function() { location.reload();}, openSettings: function() { console.log('Opening settings...');}, toggleFullscreen: function() { if (document.fullscreenElement) { document.exitFullscreen();} else { document.documentElement.requestFullscreen();} } };iPadHA.init = function(config) { if (this.isInitialized) { console.warn('iPadHA already initialized');return;} this.config = config || {};this.isIOS9 = detectIOS9();if (this.isIOS9) { document.body.classList.add('ios9-optimized');console.log('iOS 9.3.5 Optimierungen aktiv');} if (config && config.homeAssistant) { HomeAssistantAPI.init(config.homeAssistant);} EventDelegation.initClickEvents();EventDelegation.initTouchEvents();if (config && config.dashboard && config.dashboard.autoRefresh) { this.startAutoRefresh(config.dashboard.autoRefresh);} this.startMemoryManagement();this.updateTime();setInterval(this.updateTime.bind(this), 1000);this.isInitialized = true;console.log('iPadHA initialized successfully');};iPadHA.startAutoRefresh = function(interval) { setInterval(function() { HomeAssistantAPI.getAllStates().then(function(states) { iPadHA.updateEntityStates(states);}).catch(function(error) { console.error('Auto-refresh error:', error);});}, interval);};iPadHA.updateEntityStates = function(states) { states.forEach(function(state) { var tile = document.querySelector('[data-entity-id="' + state.entity_id + '"]');if (tile) { iPadHA.updateTileState(tile, state);} });};iPadHA.updateTileState = function(tile, state) { var indicator = tile.querySelector('.status-indicator');if (indicator) { indicator.className = 'status-indicator ' + state.state;} var statusText = tile.querySelector('.status-text');if (statusText) { statusText.textContent = state.state === 'on' ? 'AN' : 'AUS';} if (state.attributes && state.attributes.brightness !== undefined) { var slider = tile.querySelector('.tile-slider');if (slider) { var percentage = Math.round((state.attributes.brightness / 255) * 100);var thumb = slider.querySelector('.slider-thumb');var valueDisplay = slider.querySelector('.slider-value');if (thumb) { thumb.style.left = percentage + '%';} if (valueDisplay) { valueDisplay.textContent = percentage + '%';} } } if (state.attributes && state.attributes.unit_of_measurement) { var value = tile.querySelector('.value');var unit = tile.querySelector('.unit');if (value) { value.textContent = state.state;} if (unit) { unit.textContent = state.attributes.unit_of_measurement;} } };iPadHA.updateTime = function() { var timeElement = document.getElementById('current-time');if (timeElement) { var now = new Date();var timeString = now.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });timeElement.textContent = timeString;} };iPadHA.startMemoryManagement = function() { setInterval(function() { Utils.forceGC();}, 30000);document.addEventListener('visibilitychange', function() { if (document.hidden) { Utils.cleanup();} });};window.addEventListener('beforeunload', function() { Utils.cleanup();});global.iPadHA = iPadHA;})(window);