(function(global) { 'use strict';var iPadHA = { version: '1.0.0', config: {}, entities: {}, eventListeners: [], isInitialized: false, isIOS9: false, isDragging: false, dragStartX: 0, dragStartY: 0, currentValue: 0, startValue: 0 };function detectIOS9() { var userAgent = navigator.userAgent;var iOS = /iPad|iPhone|iPod/.test(userAgent);var version = userAgent.match(/OS (\d+)_(\d+)/);return iOS && version && parseInt(version[1]) === 9 && parseInt(version[2]) <= 3;} var Utils = { debounce: function(func, wait) { var timeout;return function() { var context = this;var args = arguments;clearTimeout(timeout);timeout = setTimeout(function() { func.apply(context, args);}, wait);};}, throttle: function(func, limit) { var inThrottle;return function() { var args = arguments;var context = this;if (!inThrottle) { func.apply(context, args);inThrottle = true;setTimeout(function() { inThrottle = false;}, limit);} };}, isElementInViewport: function(el) { var rect = el.getBoundingClientRect();return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth) );}, hapticFeedback: function() { if (navigator.vibrate) { navigator.vibrate(10);} }, cleanup: function() { iPadHA.eventListeners.forEach(function(listener) { listener.element.removeEventListener(listener.event, listener.handler);});iPadHA.eventListeners = [];}, forceGC: function() { if (window.gc) { window.gc();} } };var EventDelegation = { initClickEvents: function() { document.addEventListener('click', function(e) { var tile = e.target.closest('.tile');if (tile) { EventDelegation.handleTileClick(tile, e);} var navTab = e.target.closest('.nav-tab');if (navTab) { EventDelegation.handleNavTabClick(navTab, e);} var button = e.target.closest('.touch-button');if (button) { EventDelegation.handleButtonClick(button, e);} });}, initTouchEvents: function() { document.addEventListener('touchstart', function(e) { var tile = e.target.closest('.tile');if (tile) { EventDelegation.handleTouchStart(tile, e);} var slider = e.target.closest('.tile-slider');if (slider) { EventDelegation.handleSliderTouchStart(slider, e);} }, { passive: false });document.addEventListener('touchmove', function(e) { if (iPadHA.isDragging) { EventDelegation.handleTouchMove(e);} }, { passive: false });document.addEventListener('touchend', function(e) { if (iPadHA.isDragging) { EventDelegation.handleTouchEnd(e);} }, { passive: false });}, handleTileClick: function(tile, e) { e.preventDefault();e.stopPropagation();var entityId = tile.getAttribute('data-entity-id');if (!entityId) return;Utils.hapticFeedback();tile.classList.add('touch-feedback');setTimeout(function() { tile.classList.remove('touch-feedback');}, 150);HomeAssistantAPI.toggleEntity(entityId);}, handleNavTabClick: function(tab, e) { e.preventDefault();e.stopPropagation();var tabId = tab.getAttribute('data-tab');if (!tabId) return;Utils.hapticFeedback();Navigation.switchTab(tabId);}, handleButtonClick: function(button, e) { e.preventDefault();e.stopPropagation();Utils.hapticFeedback();button.classList.add('touch-feedback');setTimeout(function() { button.classList.remove('touch-feedback');}, 150);var action = button.getAttribute('data-action');if (action) { Actions.execute(action, button);} }, handleTouchStart: function(tile, e) { e.preventDefault();tile.classList.add('touch-highlight');}, handleSliderTouchStart: function(slider, e) { e.preventDefault();iPadHA.isDragging = true;var touch = e.touches[0];var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();iPadHA.dragStartX = touch.clientX;iPadHA.dragStartY = touch.clientY;iPadHA.currentValue = Slider.getCurrentValue(slider);iPadHA.startValue = iPadHA.currentValue;Utils.hapticFeedback();}, handleTouchMove: function(e) { if (!iPadHA.isDragging) return;e.preventDefault();var touch = e.touches[0];var deltaX = touch.clientX - iPadHA.dragStartX;var slider = document.querySelector('.tile-slider.dragging');if (slider) { Slider.updatePosition(slider, deltaX);} }, handleTouchEnd: function(e) { if (!iPadHA.isDragging) return;e.preventDefault();iPadHA.isDragging = false;var slider = document.querySelector('.tile-slider.dragging');if (slider) { Slider.finishDrag(slider);} var highlightedTiles = document.querySelectorAll('.touch-highlight');highlightedTiles.forEach(function(tile) { tile.classList.remove('touch-highlight');});} };var Slider = { getCurrentValue: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var thumbLeft = parseInt(thumb.style.left) || 0;return Math.max(0, Math.min(100, (thumbLeft / rect.width) * 100));}, updatePosition: function(slider, deltaX) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var percentage = Math.max(0, Math.min(100, iPadHA.startValue + (deltaX / rect.width) * 100));iPadHA.currentValue = percentage;thumb.style.left = percentage + '%';var valueDisplay = slider.querySelector('.slider-value');if (valueDisplay) { valueDisplay.textContent = Math.round(percentage) + '%';} Slider.throttledUpdate(slider, percentage);}, throttledUpdate: Utils.throttle(function(slider, value) { var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId) { HomeAssistantAPI.setBrightness(entityId, value);} }, 50), finishDrag: function(slider) { slider.classList.remove('dragging');var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId) { HomeAssistantAPI.setBrightness(entityId, iPadHA.currentValue);} } };var Navigation = { switchTab: function(tabId) { var tabs = document.querySelectorAll('.nav-tab');tabs.forEach(function(tab) { tab.classList.remove('active');});var panels = document.querySelectorAll('.tab-panel');panels.forEach(function(panel) { panel.classList.remove('active');});var activeTab = document.querySelector('[data-tab="' + tabId + '"]');if (activeTab) { activeTab.classList.add('active');} var activePanel = document.getElementById(tabId);if (activePanel) { activePanel.classList.add('active');} if (window.gtag) { gtag('event', 'tab_switch', { 'tab_id': tabId });} } };var HomeAssistantAPI = { baseURL: '', token: '', init: function(config) { this.baseURL = config.homeAssistant.url;this.token = config.homeAssistant.token;}, callAPI: function(endpoint, method, data) { var xhr = new XMLHttpRequest();xhr.open(method || 'GET', this.baseURL + endpoint, true);xhr.setRequestHeader('Content-Type', 'application/json');if (this.token) { xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);} return new Promise(function(resolve, reject) { xhr.onreadystatechange = function() { if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { try { var response = JSON.parse(xhr.responseText);resolve(response);} catch (e) { resolve(xhr.responseText);} } else { reject(new Error('API Error: ' + xhr.status + ' ' + xhr.statusText));} } };if (data) { xhr.send(JSON.stringify(data));} else { xhr.send();} });}, toggleEntity: function(entityId) { var domain = entityId.split('.')[0];var service = domain === 'light' ? 'toggle' : 'toggle';return this.callAPI('/api/services/' + domain + '/' + service, 'POST', { entity_id: entityId });}, setBrightness: function(entityId, brightness) { return this.callAPI('/api/services/light/turn_on', 'POST', { entity_id: entityId, brightness_pct: Math.round(brightness) });}, getEntityState: function(entityId) { return this.callAPI('/api/states/' + entityId);}, getAllStates: function() { return this.callAPI('/api/states');} };var Actions = { execute: function(action, element) { switch (action) { case 'refresh': this.refresh();break;case 'settings': this.openSettings();break;case 'fullscreen': this.toggleFullscreen();break;default: console.log('Unknown action:', action);} }, refresh: function() { location.reload();}, openSettings: function() { console.log('Opening settings...');}, toggleFullscreen: function() { if (document.fullscreenElement) { document.exitFullscreen();} else { document.documentElement.requestFullscreen();} } };iPadHA.init = function(config) { if (this.isInitialized) { console.warn('iPadHA already initialized');return;} this.config = config || {};this.isIOS9 = detectIOS9();if (this.isIOS9) { document.body.classList.add('ios9-optimized');console.log('iOS 9.3.5 Optimierungen aktiv');} if (config && config.homeAssistant) { HomeAssistantAPI.init(config.homeAssistant);} EventDelegation.initClickEvents();EventDelegation.initTouchEvents();if (config && config.dashboard && config.dashboard.autoRefresh) { this.startAutoRefresh(config.dashboard.autoRefresh);} this.startMemoryManagement();this.updateTime();setInterval(this.updateTime.bind(this), 1000);this.isInitialized = true;console.log('iPadHA initialized successfully');};iPadHA.startAutoRefresh = function(interval) { setInterval(function() { HomeAssistantAPI.getAllStates().then(function(states) { iPadHA.updateEntityStates(states);}).catch(function(error) { console.error('Auto-refresh error:', error);});}, interval);};iPadHA.updateEntityStates = function(states) { states.forEach(function(state) { var tile = document.querySelector('[data-entity-id="' + state.entity_id + '"]');if (tile) { iPadHA.updateTileState(tile, state);} });};iPadHA.updateTileState = function(tile, state) { var indicator = tile.querySelector('.status-indicator');if (indicator) { indicator.className = 'status-indicator ' + state.state;} var statusText = tile.querySelector('.status-text');if (statusText) { statusText.textContent = state.state === 'on' ? 'AN' : 'AUS';} if (state.attributes && state.attributes.brightness !== undefined) { var slider = tile.querySelector('.tile-slider');if (slider) { var percentage = Math.round((state.attributes.brightness / 255) * 100);var thumb = slider.querySelector('.slider-thumb');var valueDisplay = slider.querySelector('.slider-value');if (thumb) { thumb.style.left = percentage + '%';} if (valueDisplay) { valueDisplay.textContent = percentage + '%';} } } if (state.attributes && state.attributes.unit_of_measurement) { var value = tile.querySelector('.value');var unit = tile.querySelector('.unit');if (value) { value.textContent = state.state;} if (unit) { unit.textContent = state.attributes.unit_of_measurement;} } };iPadHA.updateTime = function() { var timeElement = document.getElementById('current-time');if (timeElement) { var now = new Date();var timeString = now.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });timeElement.textContent = timeString;} };iPadHA.startMemoryManagement = function() { setInterval(function() { Utils.forceGC();}, 30000);document.addEventListener('visibilitychange', function() { if (document.hidden) { Utils.cleanup();} });};window.addEventListener('beforeunload', function() { Utils.cleanup();});global.iPadHA = iPadHA;})(window);(function(global) { 'use strict';var TouchManager = { touches: [], touchStartTime: 0, touchStartPosition: { x: 0, y: 0 }, touchEndPosition: { x: 0, y: 0 }, isDragging: false, dragThreshold: 10, swipeThreshold: 50, longPressThreshold: 500, longPressTimer: null, handleTouchStart: function(e) { e.preventDefault();this.touches = Array.from(e.touches);this.touchStartTime = Date.now();this.touchStartPosition = { x: e.touches[0].clientX, y: e.touches[0].clientY };this.startLongPressTimer(e);this.addTouchFeedback(e.target);}, handleTouchMove: function(e) { e.preventDefault();if (this.touches.length === 0) return;var currentTouch = e.touches[0];var deltaX = currentTouch.clientX - this.touchStartPosition.x;var deltaY = currentTouch.clientY - this.touchStartPosition.y;var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);if (distance > this.dragThreshold && !this.isDragging) { this.isDragging = true;this.startDrag(e);} if (this.isDragging) { this.updateDrag(e);} }, handleTouchEnd: function(e) { e.preventDefault();var touchDuration = Date.now() - this.touchStartTime;var deltaX = e.changedTouches[0].clientX - this.touchStartPosition.x;var deltaY = e.changedTouches[0].clientY - this.touchStartPosition.y;var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);this.stopLongPressTimer();this.removeTouchFeedback(e.target);if (this.isDragging) { this.endDrag(e);return;} if (distance > this.swipeThreshold && touchDuration < 300) { this.handleSwipe(e, deltaX, deltaY);return;} if (distance < this.dragThreshold && touchDuration < 300) { this.handleTap(e);} }, startLongPressTimer: function(e) { var self = this;this.longPressTimer = setTimeout(function() { self.handleLongPress(e);}, this.longPressThreshold);}, stopLongPressTimer: function() { if (this.longPressTimer) { clearTimeout(this.longPressTimer);this.longPressTimer = null;} }, handleLongPress: function(e) { var target = e.target.closest('.tile');if (target) { this.triggerLongPress(target, e);} }, handleTap: function(e) { var target = e.target.closest('.tile, .touch-button, .nav-tab');if (target) { this.triggerTap(target, e);} }, handleSwipe: function(e, deltaX, deltaY) { var direction = this.getSwipeDirection(deltaX, deltaY);var target = e.target.closest('.swipeable');if (target) { this.triggerSwipe(target, direction, e);} }, getSwipeDirection: function(deltaX, deltaY) { var absX = Math.abs(deltaX);var absY = Math.abs(deltaY);if (absX > absY) { return deltaX > 0 ? 'right' : 'left';} else { return deltaY > 0 ? 'down' : 'up';} }, startDrag: function(e) { var target = e.target.closest('.draggable');if (target) { target.classList.add('dragging');this.triggerDragStart(target, e);} }, updateDrag: function(e) { var target = document.querySelector('.dragging');if (target) { this.triggerDragUpdate(target, e);} }, endDrag: function(e) { var target = document.querySelector('.dragging');if (target) { target.classList.remove('dragging');this.triggerDragEnd(target, e);} this.isDragging = false;}, addTouchFeedback: function(element) { var target = element.closest('.touch-target, .tile, .touch-button');if (target) { target.classList.add('touch-feedback');} }, removeTouchFeedback: function(element) { var target = element.closest('.touch-target, .tile, .touch-button');if (target) { setTimeout(function() { target.classList.remove('touch-feedback');}, 150);} }, triggerTap: function(target, e) { var event = new CustomEvent('touchTap', { detail: { target: target, originalEvent: e } });target.dispatchEvent(event);}, triggerLongPress: function(target, e) { var event = new CustomEvent('touchLongPress', { detail: { target: target, originalEvent: e } });target.dispatchEvent(event);}, triggerSwipe: function(target, direction, e) { var event = new CustomEvent('touchSwipe', { detail: { target: target, direction: direction, originalEvent: e } });target.dispatchEvent(event);}, triggerDragStart: function(target, e) { var event = new CustomEvent('touchDragStart', { detail: { target: target, originalEvent: e } });target.dispatchEvent(event);}, triggerDragUpdate: function(target, e) { var event = new CustomEvent('touchDragUpdate', { detail: { target: target, originalEvent: e } });target.dispatchEvent(event);}, triggerDragEnd: function(target, e) { var event = new CustomEvent('touchDragEnd', { detail: { target: target, originalEvent: e } });target.dispatchEvent(event);} };var SliderTouchHandler = { init: function() { var sliders = document.querySelectorAll('.tile-slider');sliders.forEach(function(slider) { SliderTouchHandler.attachEvents(slider);});}, attachEvents: function(slider) { var thumb = slider.querySelector('.slider-thumb');if (!thumb) return;thumb.addEventListener('touchstart', function(e) { SliderTouchHandler.handleTouchStart(slider, e);}, { passive: false });thumb.addEventListener('touchmove', function(e) { SliderTouchHandler.handleTouchMove(slider, e);}, { passive: false });thumb.addEventListener('touchend', function(e) { SliderTouchHandler.handleTouchEnd(slider, e);}, { passive: false });thumb.addEventListener('mousedown', function(e) { SliderTouchHandler.handleMouseDown(slider, e);});}, handleTouchStart: function(slider, e) { e.preventDefault();e.stopPropagation();var touch = e.touches[0];var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();slider.classList.add('dragging');slider.startX = touch.clientX;slider.startValue = SliderTouchHandler.getCurrentValue(slider);slider.rect = rect;if (navigator.vibrate) { navigator.vibrate(10);} }, handleTouchMove: function(slider, e) { if (!slider.classList.contains('dragging')) return;e.preventDefault();e.stopPropagation();var touch = e.touches[0];var deltaX = touch.clientX - slider.startX;var percentage = Math.max(0, Math.min(100, slider.startValue + (deltaX / slider.rect.width) * 100));SliderTouchHandler.updateSlider(slider, percentage);}, handleTouchEnd: function(slider, e) { if (!slider.classList.contains('dragging')) return;e.preventDefault();e.stopPropagation();slider.classList.remove('dragging');var finalValue = SliderTouchHandler.getCurrentValue(slider);SliderTouchHandler.finishSlider(slider, finalValue);}, handleMouseDown: function(slider, e) { e.preventDefault();e.stopPropagation();var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();slider.classList.add('dragging');slider.startX = e.clientX;slider.startValue = SliderTouchHandler.getCurrentValue(slider);slider.rect = rect;document.addEventListener('mousemove', function mouseMove(e) { SliderTouchHandler.handleMouseMove(slider, e);});document.addEventListener('mouseup', function mouseUp(e) { SliderTouchHandler.handleMouseUp(slider, e);document.removeEventListener('mousemove', mouseMove);document.removeEventListener('mouseup', mouseUp);});}, handleMouseMove: function(slider, e) { if (!slider.classList.contains('dragging')) return;e.preventDefault();var deltaX = e.clientX - slider.startX;var percentage = Math.max(0, Math.min(100, slider.startValue + (deltaX / slider.rect.width) * 100));SliderTouchHandler.updateSlider(slider, percentage);}, handleMouseUp: function(slider, e) { if (!slider.classList.contains('dragging')) return;slider.classList.remove('dragging');var finalValue = SliderTouchHandler.getCurrentValue(slider);SliderTouchHandler.finishSlider(slider, finalValue);}, getCurrentValue: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var thumbLeft = parseInt(thumb.style.left) || 0;return Math.max(0, Math.min(100, (thumbLeft / rect.width) * 100));}, updateSlider: function(slider, percentage) { var thumb = slider.querySelector('.slider-thumb');var valueDisplay = slider.querySelector('.slider-value');if (thumb) { thumb.style.left = percentage + '%';} if (valueDisplay) { valueDisplay.textContent = Math.round(percentage) + '%';} SliderTouchHandler.throttledUpdate(slider, percentage);}, throttledUpdate: function(slider, value) { if (!slider.updateTimer) { slider.updateTimer = setTimeout(function() { var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId && window.iPadHA) { window.iPadHA.HomeAssistantAPI.setBrightness(entityId, value);} slider.updateTimer = null;}, 50);} }, finishSlider: function(slider, value) { var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (entityId && window.iPadHA) { window.iPadHA.HomeAssistantAPI.setBrightness(entityId, value);} } };var SwipeNavigation = { init: function() { var swipeable = document.querySelector('.dashboard-main');if (swipeable) { swipeable.classList.add('swipeable');this.attachSwipeEvents(swipeable);} }, attachSwipeEvents: function(element) { element.addEventListener('touchSwipe', function(e) { SwipeNavigation.handleSwipe(e.detail.direction);});}, handleSwipe: function(direction) { var currentTab = document.querySelector('.nav-tab.active');if (!currentTab) return;var tabs = Array.from(document.querySelectorAll('.nav-tab'));var currentIndex = tabs.indexOf(currentTab);var nextIndex = currentIndex;switch (direction) { case 'left': nextIndex = Math.min(currentIndex + 1, tabs.length - 1);break;case 'right': nextIndex = Math.max(currentIndex - 1, 0);break;} if (nextIndex !== currentIndex) { var nextTab = tabs[nextIndex];var tabId = nextTab.getAttribute('data-tab');if (tabId && window.iPadHA) { window.iPadHA.Navigation.switchTab(tabId);} } } };function initTouchEvents() { document.addEventListener('touchstart', function(e) { TouchManager.handleTouchStart(e);}, { passive: false });document.addEventListener('touchmove', function(e) { TouchManager.handleTouchMove(e);}, { passive: false });document.addEventListener('touchend', function(e) { TouchManager.handleTouchEnd(e);}, { passive: false });SliderTouchHandler.init();SwipeNavigation.init();console.log('Touch events initialized');} function initIOS9Optimizations() { document.addEventListener('touchstart', function(e) { if (e.touches.length > 1) { e.preventDefault();} }, { passive: false });document.addEventListener('contextmenu', function(e) { e.preventDefault();});document.addEventListener('selectstart', function(e) { e.preventDefault();});var animatedElements = document.querySelectorAll('.tile, .nav-tab, .slider-thumb');animatedElements.forEach(function(element) { element.style.transform = 'translateZ(0)';element.style.webkitTransform = 'translateZ(0)';});console.log('iOS 9.3.5 optimizations applied');} function init() { initTouchEvents();if (navigator.userAgent.indexOf('Safari') !== -1) { initIOS9Optimizations();} } if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', init);} else { init();} global.TouchManager = TouchManager;global.SliderTouchHandler = SliderTouchHandler;global.SwipeNavigation = SwipeNavigation;})(window);(function(global) { 'use strict';var SliderManager = { sliders: [], activeSlider: null, isDragging: false, dragStartX: 0, dragStartY: 0, startValue: 0, currentValue: 0, updateThrottle: 50, updateTimer: null, init: function() { this.sliders = Array.from(document.querySelectorAll('.tile-slider'));this.sliders.forEach(function(slider) { SliderManager.initSlider(slider);});console.log('SliderManager initialized with', this.sliders.length, 'sliders');}, initSlider: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');if (!thumb || !track) { console.warn('Slider missing thumb or track element');return;} thumb.addEventListener('touchstart', function(e) { SliderManager.handleTouchStart(slider, e);}, { passive: false });thumb.addEventListener('touchmove', function(e) { SliderManager.handleTouchMove(slider, e);}, { passive: false });thumb.addEventListener('touchend', function(e) { SliderManager.handleTouchEnd(slider, e);}, { passive: false });thumb.addEventListener('mousedown', function(e) { SliderManager.handleMouseDown(slider, e);});track.addEventListener('click', function(e) { SliderManager.handleTrackClick(slider, e);});var initialValue = this.getSliderValue(slider);this.setSliderValue(slider, initialValue);}, handleTouchStart: function(slider, e) { e.preventDefault();e.stopPropagation();var touch = e.touches[0];var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();this.activeSlider = slider;this.isDragging = true;this.dragStartX = touch.clientX;this.dragStartY = touch.clientY;this.startValue = this.getSliderValue(slider);this.currentValue = this.startValue;slider.classList.add('dragging');thumb.classList.add('active');this.hapticFeedback();this.triggerEvent(slider, 'sliderStart', { value: this.startValue, touch: touch });}, handleTouchMove: function(slider, e) { if (!this.isDragging || this.activeSlider !== slider) return;e.preventDefault();e.stopPropagation();var touch = e.touches[0];var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var deltaX = touch.clientX - this.dragStartX;var percentage = Math.max(0, Math.min(100, this.startValue + (deltaX / rect.width) * 100));this.currentValue = percentage;this.updateSlider(slider, percentage);this.triggerEvent(slider, 'sliderMove', { value: percentage, touch: touch });}, handleTouchEnd: function(slider, e) { if (!this.isDragging || this.activeSlider !== slider) return;e.preventDefault();e.stopPropagation();this.isDragging = false;this.activeSlider = null;slider.classList.remove('dragging');var thumb = slider.querySelector('.slider-thumb');if (thumb) { thumb.classList.remove('active');} this.setSliderValue(slider, this.currentValue);this.updateHomeAssistant(slider, this.currentValue);this.triggerEvent(slider, 'sliderEnd', { value: this.currentValue });}, handleMouseDown: function(slider, e) { e.preventDefault();e.stopPropagation();var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();this.activeSlider = slider;this.isDragging = true;this.dragStartX = e.clientX;this.dragStartY = e.clientY;this.startValue = this.getSliderValue(slider);this.currentValue = this.startValue;slider.classList.add('dragging');var thumb = slider.querySelector('.slider-thumb');if (thumb) { thumb.classList.add('active');} document.addEventListener('mousemove', this.handleMouseMove.bind(this));document.addEventListener('mouseup', this.handleMouseUp.bind(this));this.triggerEvent(slider, 'sliderStart', { value: this.startValue, mouse: e });}, handleMouseMove: function(e) { if (!this.isDragging || !this.activeSlider) return;e.preventDefault();var slider = this.activeSlider;var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var deltaX = e.clientX - this.dragStartX;var percentage = Math.max(0, Math.min(100, this.startValue + (deltaX / rect.width) * 100));this.currentValue = percentage;this.updateSlider(slider, percentage);this.triggerEvent(slider, 'sliderMove', { value: percentage, mouse: e });}, handleMouseUp: function(e) { if (!this.isDragging || !this.activeSlider) return;var slider = this.activeSlider;this.isDragging = false;this.activeSlider = null;slider.classList.remove('dragging');var thumb = slider.querySelector('.slider-thumb');if (thumb) { thumb.classList.remove('active');} document.removeEventListener('mousemove', this.handleMouseMove.bind(this));document.removeEventListener('mouseup', this.handleMouseUp.bind(this));this.setSliderValue(slider, this.currentValue);this.updateHomeAssistant(slider, this.currentValue);this.triggerEvent(slider, 'sliderEnd', { value: this.currentValue });}, handleTrackClick: function(slider, e) { if (this.isDragging) return;var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var clickX = e.clientX || (e.touches && e.touches[0].clientX);if (clickX) { var percentage = Math.max(0, Math.min(100, ((clickX - rect.left) / rect.width) * 100));this.setSliderValue(slider, percentage);this.updateHomeAssistant(slider, percentage);this.triggerEvent(slider, 'sliderClick', { value: percentage });} }, getSliderValue: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var rect = track.getBoundingClientRect();var thumbLeft = parseInt(thumb.style.left) || 0;return Math.max(0, Math.min(100, (thumbLeft / rect.width) * 100));}, setSliderValue: function(slider, value) { var thumb = slider.querySelector('.slider-thumb');var valueDisplay = slider.querySelector('.slider-value');if (thumb) { thumb.style.left = value + '%';} if (valueDisplay) { valueDisplay.textContent = Math.round(value) + '%';} }, updateSlider: function(slider, value) { this.setSliderValue(slider, value);this.throttledUpdate(slider, value);}, throttledUpdate: function(slider, value) { if (this.updateTimer) { clearTimeout(this.updateTimer);} this.updateTimer = setTimeout(function() { SliderManager.updateHomeAssistant(slider, value);SliderManager.updateTimer = null;}, this.updateThrottle);}, updateHomeAssistant: function(slider, value) { var entityId = slider.closest('.tile').getAttribute('data-entity-id');if (!entityId) return;if (window.iPadHA && window.iPadHA.HomeAssistantAPI) { window.iPadHA.HomeAssistantAPI.setBrightness(entityId, value);} else { this.callHomeAssistantAPI(entityId, value);} }, callHomeAssistantAPI: function(entityId, brightness) { var xhr = new XMLHttpRequest();xhr.open('POST', '/api/services/light/turn_on', true);xhr.setRequestHeader('Content-Type', 'application/json');xhr.onreadystatechange = function() { if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { console.log('Brightness updated for', entityId, 'to', brightness + '%');} else { console.error('Failed to update brightness:', xhr.status, xhr.statusText);} } };xhr.send(JSON.stringify({ entity_id: entityId, brightness_pct: Math.round(brightness) }));}, triggerEvent: function(slider, eventName, detail) { var event = new CustomEvent('slider' + eventName, { detail: detail });slider.dispatchEvent(event);}, hapticFeedback: function() { if (navigator.vibrate) { navigator.vibrate(10);} }, updateSliderFromExternal: function(entityId, value) { var slider = document.querySelector('[data-entity-id="' + entityId + '"] .tile-slider');if (slider) { this.setSliderValue(slider, value);} }, updateAllSliders: function(entityStates) { var self = this;entityStates.forEach(function(state) { if (state.attributes && state.attributes.brightness !== undefined) { var percentage = Math.round((state.attributes.brightness / 255) * 100);self.updateSliderFromExternal(state.entity_id, percentage);} });} };var SliderAnimations = { animateToValue: function(slider, targetValue, duration) { var startValue = SliderManager.getSliderValue(slider);var startTime = Date.now();var duration = duration || 300;function animate() { var elapsed = Date.now() - startTime;var progress = Math.min(elapsed / duration, 1);var eased = 1 - Math.pow(1 - progress, 3);var currentValue = startValue + (targetValue - startValue) * eased;SliderManager.setSliderValue(slider, currentValue);if (progress < 1) { requestAnimationFrame(animate);} } requestAnimationFrame(animate);}, pulse: function(slider) { var thumb = slider.querySelector('.slider-thumb');if (!thumb) return;thumb.classList.add('pulse');setTimeout(function() { thumb.classList.remove('pulse');}, 200);} };var SliderValidation = { validateValue: function(value) { return Math.max(0, Math.min(100, parseFloat(value) || 0));}, isSliderValid: function(slider) { var thumb = slider.querySelector('.slider-thumb');var track = slider.querySelector('.slider-track');var valueDisplay = slider.querySelector('.slider-value');return !!(thumb && track && valueDisplay);}, handleError: function(slider, error) { console.error('Slider error:', error);slider.classList.add('error');setTimeout(function() { slider.classList.remove('error');}, 1000);} };function init() { SliderManager.init();document.addEventListener('entityStateUpdate', function(e) { if (e.detail && e.detail.attributes && e.detail.attributes.brightness !== undefined) { var percentage = Math.round((e.detail.attributes.brightness / 255) * 100);SliderManager.updateSliderFromExternal(e.detail.entity_id, percentage);} });console.log('Sliders initialized');} if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', init);} else { init();} global.SliderManager = SliderManager;global.SliderAnimations = SliderAnimations;global.SliderValidation = SliderValidation;})(window);(function(global) { 'use strict';var isIOS9 = function() { var userAgent = navigator.userAgent;var iOS = /iPad|iPhone|iPod/.test(userAgent);var version = userAgent.match(/OS (\d+)_(\d+)/);return iOS && version && parseInt(version[1]) === 9 && parseInt(version[2]) <= 3;};var PerformanceOptimizer = { memoryManager: { objects: [], maxObjects: 1000, register: function(obj) { this.objects.push(obj);if (this.objects.length > this.maxObjects) { this.cleanup();} }, cleanup: function() { this.objects = this.objects.slice(-this.maxObjects / 2);this.forceGC();}, forceGC: function() { if (window.gc) { window.gc();} } }, eventDelegation: { listeners: [], add: function(element, event, handler) { element.addEventListener(event, handler);this.listeners.push({ element: element, event: event, handler: handler });}, cleanup: function() { this.listeners.forEach(function(listener) { listener.element.removeEventListener(listener.event, listener.handler);});this.listeners = [];} }, throttle: function(func, limit) { var inThrottle;return function() { var args = arguments;var context = this;if (!inThrottle) { func.apply(context, args);inThrottle = true;setTimeout(function() { inThrottle = false;}, limit);} };}, debounce: function(func, wait) { var timeout;return function() { var context = this;var args = arguments;clearTimeout(timeout);timeout = setTimeout(function() { func.apply(context, args);}, wait);};} };var Polyfills = { initArrayPolyfills: function() { if (!Array.prototype.forEach) { Array.prototype.forEach = function(callback, thisArg) { for (var i = 0;i < this.length;i++) { callback.call(thisArg, this[i], i, this);} };} if (!Array.prototype.filter) { Array.prototype.filter = function(callback, thisArg) { var result = [];for (var i = 0;i < this.length;i++) { if (callback.call(thisArg, this[i], i, this)) { result.push(this[i]);} } return result;};} if (!Array.prototype.map) { Array.prototype.map = function(callback, thisArg) { var result = [];for (var i = 0;i < this.length;i++) { result.push(callback.call(thisArg, this[i], i, this));} return result;};} if (!Array.prototype.find) { Array.prototype.find = function(callback, thisArg) { for (var i = 0;i < this.length;i++) { if (callback.call(thisArg, this[i], i, this)) { return this[i];} } return undefined;};} if (!Array.prototype.includes) { Array.prototype.includes = function(searchElement, fromIndex) { var from = fromIndex || 0;for (var i = from;i < this.length;i++) { if (this[i] === searchElement) { return true;} } return false;};} }, initObjectPolyfills: function() { if (!Object.assign) { Object.assign = function(target) { for (var i = 1;i < arguments.length;i++) { var source = arguments[i];for (var key in source) { if (source.hasOwnProperty(key)) { target[key] = source[key];} } } return target;};} if (!Object.keys) { Object.keys = function(obj) { var keys = [];for (var key in obj) { if (obj.hasOwnProperty(key)) { keys.push(key);} } return keys;};} }, initStringPolyfills: function() { if (!String.prototype.startsWith) { String.prototype.startsWith = function(searchString, position) { position = position || 0;return this.indexOf(searchString, position) === position;};} if (!String.prototype.endsWith) { String.prototype.endsWith = function(searchString, length) { if (length === undefined || length > this.length) { length = this.length;} return this.indexOf(searchString, length - searchString.length) !== -1;};} if (!String.prototype.includes) { String.prototype.includes = function(search, start) { if (typeof start !== 'number') { start = 0;} if (start + search.length > this.length) { return false;} else { return this.indexOf(search, start) !== -1;} };} }, initPromisePolyfill: function() { if (!window.Promise) { window.Promise = function(executor) { var self = this;self.state = 'pending';self.value = undefined;self.handlers = [];function resolve(result) { if (self.state === 'pending') { self.state = 'fulfilled';self.value = result;self.handlers.forEach(handle);self.handlers = null;} } function reject(error) { if (self.state === 'pending') { self.state = 'rejected';self.value = error;self.handlers.forEach(handle);self.handlers = null;} } function handle(handler) { if (self.state === 'pending') { self.handlers.push(handler);} else { if (self.state === 'fulfilled' && typeof handler.onFulfilled === 'function') { handler.onFulfilled(self.value);} if (self.state === 'rejected' && typeof handler.onRejected === 'function') { handler.onRejected(self.value);} } } this.then = function(onFulfilled, onRejected) { return new Promise(function(resolve, reject) { handle({ onFulfilled: function(result) { try { resolve(onFulfilled ? onFulfilled(result) : result);} catch (ex) { reject(ex);} }, onRejected: function(error) { try { resolve(onRejected ? onRejected(error) : error);} catch (ex) { reject(ex);} } });});};executor(resolve, reject);};} }, init: function() { this.initArrayPolyfills();this.initObjectPolyfills();this.initStringPolyfills();this.initPromisePolyfill();console.log('iOS 9.3.5 polyfills initialized');} };var TouchOptimizer = { optimizeTouchEvents: function() { document.addEventListener('touchstart', function(e) { if (e.touches.length > 1) { e.preventDefault();} }, { passive: false });document.addEventListener('contextmenu', function(e) { e.preventDefault();});document.addEventListener('selectstart', function(e) { e.preventDefault();});var touchElements = document.querySelectorAll('.tile, .nav-tab, .touch-button, .slider-thumb');touchElements.forEach(function(element) { element.style.touchAction = 'manipulation';element.style.webkitTouchCallout = 'none';element.style.webkitUserSelect = 'none';element.style.userSelect = 'none';});}, enableHardwareAcceleration: function() { var animatedElements = document.querySelectorAll('.tile, .nav-tab, .slider-thumb, .glass-card');animatedElements.forEach(function(element) { element.style.transform = 'translateZ(0)';element.style.webkitTransform = 'translateZ(0)';element.style.willChange = 'transform';element.style.webkitWillChange = 'transform';});}, optimizeTouchFeedback: function() { var touchElements = document.querySelectorAll('.tile, .nav-tab, .touch-button');touchElements.forEach(function(element) { element.addEventListener('touchstart', function() { this.classList.add('touch-active');}, { passive: true });element.addEventListener('touchend', function() { var self = this;setTimeout(function() { self.classList.remove('touch-active');}, 150);}, { passive: true });});} };var MemoryManager = { monitorMemory: function() { if (window.performance && window.performance.memory) { setInterval(function() { var memory = window.performance.memory;var used = memory.usedJSHeapSize / 1024 / 1024;var total = memory.totalJSHeapSize / 1024 / 1024;if (used > 50) { console.warn('High memory usage:', used.toFixed(2) + 'MB');PerformanceOptimizer.memoryManager.cleanup();} }, 30000);} }, cleanupEventListeners: function() { PerformanceOptimizer.eventDelegation.cleanup();}, forceGC: function() { PerformanceOptimizer.memoryManager.forceGC();} };var SafariFixes = { fixTransforms: function() { var elements = document.querySelectorAll('.tile, .nav-tab, .slider-thumb');elements.forEach(function(element) { element.style.webkitTransform = 'translateZ(0)';element.style.transform = 'translateZ(0)';});}, fixScrolling: function() { var scrollElements = document.querySelectorAll('.touch-scroll, .dashboard-nav');scrollElements.forEach(function(element) { element.style.webkitOverflowScrolling = 'touch';element.style.overflowScrolling = 'touch';});}, fixInputs: function() { var inputs = document.querySelectorAll('input, textarea, select');inputs.forEach(function(input) { input.style.webkitAppearance = 'none';input.style.borderRadius = '8px';});} };function init() { if (isIOS9()) { console.log('iOS 9.3.5 detected, applying optimizations...');Polyfills.init();TouchOptimizer.optimizeTouchEvents();TouchOptimizer.enableHardwareAcceleration();TouchOptimizer.optimizeTouchFeedback();SafariFixes.fixTransforms();SafariFixes.fixScrolling();SafariFixes.fixInputs();MemoryManager.monitorMemory();PerformanceOptimizer.memoryManager.register(window);console.log('iOS 9.3.5 optimizations applied');} } if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', init);} else { init();} global.PerformanceOptimizer = PerformanceOptimizer;global.TouchOptimizer = TouchOptimizer;global.MemoryManager = MemoryManager;global.SafariFixes = SafariFixes;global.isIOS9 = isIOS9;})(window);